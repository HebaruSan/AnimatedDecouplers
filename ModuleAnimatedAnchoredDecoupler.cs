// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using KSP;
using UnityEngine;

namespace AnimatedDecouplers
{
	public class ModuleAnimatedAnchoredDecoupler : ModuleAnchoredDecoupler
	{
		[KSPField]
		public string animationName;
		
		protected Animation anim;
		
		[KSPField(isPersistant = true)]
		public bool animationComplete = false;
		
		AttachNode attachNode;
		Part coupledPart;
		bool didForce = false;
		int pFrameCount;


		public ModuleAnimatedAnchoredDecoupler ():
		base()
		{
		}

		public override void OnStart (StartState state)
		{
			GameEvents.onStageSeparation.Add (checkForDecoupling);
			base.OnStart (state);
			Debug.Log ("ModuleAnimatedAnchoredDecoupler.OnStart(), isDecoupled = " + isDecoupled.ToString ());
			anim = part.FindModelAnimators(animationName).FirstOrDefault ();
			if ((object)anim == null)
			{
				Debug.Log ("ModuleAnimatedAnchoredDecoupler: Animations not found");
			}
			else
			{
				Debug.Log ("ModuleAnimatedDecoupler.OnStart() - Animation found named " + animationName);
				if (this.animationComplete || this.isDecoupled)
				// If Decoupled or animation already played then set animation to end.
				{
					this.anim[animationName].normalizedTime = 1f;
				}
			}

			// Sarbian x64 fix

			if (this.explosiveNodeID == "srf")
			{
				this.attachNode = base.part.srfAttachNode;
			}
			else
			{
				this.attachNode = base.part.findAttachNode(this.explosiveNodeID);
			}
			if (this.attachNode == null)
			{
				Print("Error: No attachnode found with id " + this.explosiveNodeID);
			}
			didForce = this.isDecoupled;
		}

		public void checkForDecoupling(EventReport separationData)
		{
			if (separationData.eventType == FlightEvents.STAGESEPARATION && separationData.origin == this.part)
			{
				// PROBABLY got called because we decoupled, but no way to know because ModuleAnchoredDecoupler doesn't SET isDecoupled until after the event fires. 
				if (!this.animationComplete || !this.anim.IsPlaying (animationName))
				{
					this.anim.Play (animationName);
					this.animationComplete = true;
					this.isDecoupled = true;
					Debug.Log ("ModuleAnimatedDecoupler.onStageSeparation() triggered animation " + this.animationName);
				}
			}
		}

		// Disabling; OnActive() not reliable for determining decoupled state and can be triggered by other mods.
		// Using GameEvents.onStageSeparation instead.
		/*
		public override void OnActive()
		{
			Debug.Log ("ModuleAnimatedAnchoredDecoupler.OnActive() start; isDecoupled = " + this.isDecoupled.ToString ());
			base.OnActive ();
			if (this.isDecoupled && (object)anims != null && !animationComplete) 
			{
				try
				{
					this.anim.Play (animationName);
					animationComplete = true;
					Debug.Log ("ModuleAnimatedAnchoredDecoupler played animation " + this.animationName + "!");
				}
				catch (Exception e)
				{
					Debug.Log ("ModuleAnimatedAnchoredDecoupler error! " + e.Message);
				}
				Debug.Log ("ModuleAnimatedAnchoredDecoupler.OnActive() finished; isDecoupled = " + this.isDecoupled.ToString ());
			}
			else
			{
				Debug.Log ("ModuleAnimatedAnchoredDecoupler.OnActive() finished; isDecoupled = " + this.isDecoupled.ToString ());
			}
		}
		*/

		// Sarbian x64 fix

		public void FixedUpdate()
		{
			if (!this.isDecoupled)
			{
				if (this.attachNode.attachedPart != null && !(this.attachNode.attachedPart == null))
				{
					coupledPart = this.attachNode.attachedPart;
				}
				pFrameCount = 1;
			}
			else if (!didForce)
			{
				if (pFrameCount != 0)
				{
					//Print("Waiting for 1 more physic frame");
					pFrameCount--;
				}
				else
				{
					if (coupledPart != null)
					{
						float force = this.ejectionForce * 0.5f;
						Print("Force = " + force);
						base.part.rigidbody.AddForceAtPosition(base.part.transform.right * -force, base.part.transform.position, ForceMode.Force);
						coupledPart.Rigidbody.AddForceAtPosition(base.transform.right * force, base.transform.position, ForceMode.Force);
					}
					
					didForce = true;
				}
			}
		}
		
		private static void Print(String s)
		{
			MonoBehaviour.print("[ModuleAnchoredDecouplerX64] " + s);
		}
	}
}